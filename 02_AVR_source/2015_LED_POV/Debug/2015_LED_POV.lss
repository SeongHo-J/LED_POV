
2015_LED_POV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000050  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000455  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001a3  00000000  00000000  00000659  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000028b  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000084  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b3  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000ca  00000000  00000000  00000cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  00000d89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	43 d0       	rcall	.+134    	; 0x120 <main>
  9a:	48 c0       	rjmp	.+144    	; 0x12c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <MBI_A_5026>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	ab 01       	movw	r20, r22
  a8:	02 2e       	mov	r0, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <MBI_A_5026+0x12>
  ac:	44 0f       	add	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <MBI_A_5026+0xe>
  b4:	48 23       	and	r20, r24
  b6:	59 23       	and	r21, r25
  b8:	45 2b       	or	r20, r21
  ba:	11 f0       	breq	.+4      	; 0xc0 <MBI_A_5026+0x22>
  bc:	d8 9a       	sbi	0x1b, 0	; 27
  be:	01 c0       	rjmp	.+2      	; 0xc2 <MBI_A_5026+0x24>
  c0:	d8 98       	cbi	0x1b, 0	; 27
  c2:	da 9a       	sbi	0x1b, 2	; 27
  c4:	4a e6       	ldi	r20, 0x6A	; 106
  c6:	4a 95       	dec	r20
  c8:	f1 f7       	brne	.-4      	; 0xc6 <MBI_A_5026+0x28>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <MBI_A_5026+0x2e>
  cc:	da 98       	cbi	0x1b, 2	; 27
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	20 31       	cpi	r18, 0x10	; 16
  d4:	31 05       	cpc	r19, r1
  d6:	39 f7       	brne	.-50     	; 0xa6 <MBI_A_5026+0x8>
  d8:	08 95       	ret

000000da <RP>:
  da:	de 9a       	sbi	0x1b, 6	; 27
  dc:	e0 df       	rcall	.-64     	; 0x9e <MBI_A_5026>
  de:	dc 9a       	sbi	0x1b, 4	; 27
  e0:	8a e6       	ldi	r24, 0x6A	; 106
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <RP+0x8>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <RP+0xe>
  e8:	dc 98       	cbi	0x1b, 4	; 27
  ea:	de 98       	cbi	0x1b, 6	; 27
  ec:	08 95       	ret

000000ee <act>:

void act(){
	long x;
	for(x=0;x<1;x++){
		
		RP(0xffff);
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	9f ef       	ldi	r25, 0xFF	; 255
  f2:	f3 df       	rcall	.-26     	; 0xda <RP>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	89 e6       	ldi	r24, 0x69	; 105
  f8:	98 e1       	ldi	r25, 0x18	; 24
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <act+0xc>
 102:	00 c0       	rjmp	.+0      	; 0x104 <act+0x16>
 104:	00 00       	nop
		_delay_ms(500);
		RP(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	e7 df       	rcall	.-50     	; 0xda <RP>
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	89 e6       	ldi	r24, 0x69	; 105
 110:	98 e1       	ldi	r25, 0x18	; 24
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <act+0x24>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <act+0x2e>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <main>:
	}
}

int main(){

	DDRA=0xFF;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	8a bb       	out	0x1a, r24	; 26
	
	while(1){
		act();
 124:	e4 df       	rcall	.-56     	; 0xee <act>
		act();
 126:	e3 df       	rcall	.-58     	; 0xee <act>
		act();			
 128:	e2 df       	rcall	.-60     	; 0xee <act>
 12a:	fc cf       	rjmp	.-8      	; 0x124 <main+0x4>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
